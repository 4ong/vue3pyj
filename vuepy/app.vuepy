v-def app_templ:
    div:
        layout:
            div(style = 'width:100%; padding: 0 10px;'):
                #modal:
                div(v-show = 'show_explorer', class = 'explorer'):
                    folder_content(@blur = 'toggle_explorer(false)'):
                editor:

v-pyj:
+++
import_amd vue as Vue, codemirror/lib/codemirror as CodeMirror, rapydscript_web as rapydscript
import_amd axios.min as axios

from asset.rs_vue import RS_vue, V_collector
import asset.common as common
from components import \
    confirm, error, app_selector, login,\
    folder_content, editor, base_layout as layout, modal

from store.root import Store

Vue.use(Store)
def reg_components():
    comps = JS('{confirm, error, app_selector, login, modal}')
    Object.keys(comps).forEach(def(k): comps[k] = comps[k].make();)
    Vue.options.components = comps

reg_components()

web23py = document.getElementsByTagName('meta')[0].dataset.web23py
window.store = Store(rs_req, web23py)

vc = V_collector()
class App(RS_vue):
    def __init__(self):
        super(vc)
        self.store = store
        self.template = app_templ
        self.map_store = {
            try_connect: 'try_connect*',
            show_explorer: 'show_explorer',
            w23p_app: 'w23p_app',
            is_logged: 'is_logged',
            toggle_explorer: 'toggle_explorer~'
        }
        comps = JS('{folder_content, editor, layout, modal}')
        Object.keys(comps).forEach(def(k): comps[k] = comps[k].make();)
        self.components = comps


    def _init_data(self):
        return {}

    @common.asyncer
    def mounted(self):
        store.commit('toggle_busy', False)
        while not self.is_logged:
            yield self.try_connect()
            #store.commit('toggle_busy', False)
            #logged = yield store.dispatch('start_modal', 'login')
        store.commit('toggle_busy', True)
        yield store.dispatch('w23p_app_list')
        store.commit('toggle_busy', False)
        while not self.w23p_app:
            app2edit = yield store.dispatch('start_modal', 'app_selector', {app_list: store.get('w23p_app_list')} )
            if app2edit!='cancel':
                yield store.dispatch('load_fs_from_srv', app2edit)

# this is an AMD module, so we should do explicit export
exports.start = def(el):
    app = App()
    (new Vue(app)).$mount(el or '#app')

def main():
    pass
if __name__=='__main__':
    main()
---