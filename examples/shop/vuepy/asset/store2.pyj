# ----- log -----------
def print_log(*args):
    if window.ENV and window.ENV.debug:
        console.log.apply(console, arguments)

def make_prop_chain(path, prefix, splitter):
    prefix = prefix or ''
    if not Array.isArray(path):
        splitter = splitter or '.'
        path = path.split(splitter).filter(def(v): return v;)
    return path.reduce(def(p,v): return p + prefix + '.' +  v;, '')

def make_prop_getter(prop_chain):
    me = make_prop_getter
    if not (ret = me._memo[prop_chain]):
        ret = me._memo[prop_chain] = Function('obj', '{return obj' + prop_chain + '}')
    return ret
make_prop_getter._memo = {}

def split_modgetter_rest(store, path):
    self = store
    mod_rest = /(^(\/[\w$]+)+)((\.[^.]+)+)$/.exec(path)
    if not mod_rest:
        return [def(): return self;, path]
    else:
        modgetter =  make_prop_getter(make_prop_chain(mod_rest[1][1:], '.modules', '/'))
    return [modgetter, mod_rest[3][1:]]

class RS_state_api:
    def mount(self, istate, vgetters_node, path):
        self.path = path
        self.istate = istate
        self.vgetters = vgetters_node
        istate.set(self.init_state)
        if self.raw_getters:
            for name in self.raw_getters:
                self.unwatchers[name] = self.mount_getter(name, self.raw_getters[name])


    def __init__(self, vc, state, root_or_vue):

        self.path = None     # array to state of module
        self.istate = None   # {get, set} - get/set module state
        self.vgetters = None # node in the state for mount module getters

        self.init_state = state
        self.raw_getters = vc._getters
        self.mutations = vc._mutations
        self.computed = {} # storage of cached-computed getter values
        self.unwatchers = {}
        if isinstance(root_or_vue, RS_state_api):
            self.root = root_or_vue
            vm = self.vm = self.root.vm
        else:
            self.root = None
            vm = self.vm = new root_or_vue({data:{state: None, getters:{}}})
            istate = {  get: def(): return vm.state;
                           , set: def(v): vm.state = v;}
            vgetters = vm.getters
            self.mount(istate, vgetters, [])

    get state(self):
        return self.istate.get()

    def mount_getter(self, name, getter, nodes):
        vm = self.vm
        vgetters_node = nodes ? nodes.vgetters : self.vgetters
        computed = nodes ? nodes.computed : self.computed
        get_state = self.istate.get

        _getter = {value: None}

        if not isinstance(getter, Function):
            raw_get_cb = getter.get
            if getter.set:
                _getter.set = getter.set
        else:
            raw_get_cb = getter

        get_cb = def():
            return raw_get_cb.call(self,
                                    get_state(), computed,
                                    vm.state, self.root and self.root.computed )

        is_cached = False
        _getter.get = def():
            nonlocal is_cached
            if not is_cached:
                _getter.value = get_cb()
                is_cached = True
            return _getter.value

        vm.$set(vgetters_node, name, _getter)
        _getter = vgetters_node[name]
        opt = {
            enumerable: True,
            configurable:True,
            get: _getter.get
        }
        Object.defineProperty(computed, name, opt)
        watcher = def(v): _getter.value = v;
        return vm.$watch(get_cb, watcher)

    def commit(self, mutation, *payload):
        print_log('mutation: ', mutation)
        print_log('\tpayload: ',  payload)
        if (h = self.mutations[mutation]):
            return h.apply(self, payload)
        else:
            raise Error('unknown mutation: ' + mutation)

    def $del(self):
        self.vm.$delete.apply(self.vm, arguments)

    def $set(self):
        self.vm.$set.apply(self.vm, arguments)

    def check_spath(self, path, return_prop):
        return self._check_path(self.state, path, return_prop)

    def check_gpath(self, path, return_prop):
        return self._check_path(self.vgetters, path, return_prop)

    def _check_path(self, obj, path, return_prop):
        path = path.split('\.')
        if path.length == 1:
            ret = obj.hasOwnProperty(path[0])
            if ret and return_prop:
                ret = obj
            return ret
        try:
            last_prnt = path[:-1].reduce(def(s, name): return s[name];, obj)
        except TypeError:
            return False
        ret = last_prnt.hasOwnProperty(path[-1])
        if ret and return_prop:
            ret = last_prnt[path[-1]]
        return ret

    def _get(self, path):
        return  make_prop_getter(make_prop_chain(path))(self.state)

    def get(self, path):
        if self.computed.hasOwnProperty(path):
            return self.computed[path]
        else:
            return self._get(path)

    def set_mutation(self, h, as_name):
        as_name = as_name or h.__name__ or h.name
        if not (as_name and type(as_name).startsWith('Str') ):
            raise Error('can`t get the name of new mutation: ' + h)
        if as_name in self.mutations:
            pass
        elif self.hasOwnProperty(as_name):
            raise Error('Bad mutation name: ' + as_name)
        self.mutations[as_name] = self[as_name] = h


class RS_store:
    def __init__(self):
        if not self.vue:
            raise ReferenceError('You should first call Vue.use(Your_Store)')
        self.dispatch_bound = self.dispatch.bind(self)
        self.commit_bound   = self.commit.bind(self)

        self.$bus = {
            $on: (def(e, cb):  return self.$on(e, cb);),
            $off: (def(e, cb):  self.$off(e, cb);),
            $emit: (def(*args):  self.$emit(*args);)
        }
    def mount_module(self, mod_obj, path, mod_name, vgetters_node):
        path_arr = path.split('.')
        if path_arr.length ==1:
            path = ''
            as_name = path_arr[0]
        else:
            as_name = path_arr[-1]
            path = path_arr[:-1].join('.')

        state_api = self.state_api
        as_name = as_name or mod_obj.__name__ or mod_obj.constructor and mod_obj.constructor.name
        if not ( as_name and type(as_name).startsWith('Str') ):
            raise Error('can`t get the name of module: ' + mod_obj)
        if path and not (path_node = state_api.check_spath(path, True)):
            raise Error('can`t mount module under path `' + path + '`, it doesn`t exist')
        path_node =  path_node or state_api.vm.state
        if not self.modules:
            self.modules = {}

        state_api.$set(path_node, as_name, None)
        rpath_node = state_api.path.concat(path_arr[:-1]) # full path to parent
        parent_node_getter = make_prop_getter(make_prop_chain(rpath_node))
        root_api = (self.root or self).state_api
        istate = {
              get: def(): return parent_node_getter(root_api.state)[as_name];
            , set: def(v): parent_node_getter(root_api.state)[as_name] = v;
        }
        vgetters_node = vgetters_node or state_api.vgetters
        mod_name = mod_name or as_name
        if vgetters_node.hasOwnProperty(mod_name):
            raise Error('can`t mount module to vgetters under name `' + mod_name + '`,  name already exists')
        state_api.$set(vgetters_node, mod_name, {})
        mod_obj.mount_state(istate, vgetters_node[mod_name], rpath_node.concat(as_name))
        self.modules[mod_name] = mod_obj

    def mount_state(self, *args):
        (s = self.state_api).mount.apply(s, args)

    def _get(self, path):
        '''
        looks for pure state only
        getters are ignored
        '''
        mod, rest = split_modgetter_rest(self, path)
        return mod(self).state_api._get(rest)

    def get(self, path):
        '''
        returns getter-value or state
        looks for getter first
        '''
        mod, rest = split_modgetter_rest(self, path)
        return mod(self).state_api.get(rest)

    def getter_factory(self, path):
        '''
        also accepts (modgetter, rest) as args
        '''
        argtype = type(path)
        if argtype[0] is 'S': # String - regular call as  f(path)
            modgetter, rest =  split_modgetter_rest(self, path)
        elif argtype[0] is 'F': # Function - call as f(modgetter, rest)
            modgetter = arguments[0]
            rest = arguments[1]
        else:
            raise Error('Wrong args: ', arguments)
        getter = make_prop_getter(make_prop_chain(rest))
        return def():
            mod = modgetter(self)
            if mod.state_api.vgetters.hasOwnProperty(rest):
                return mod.state_api.vgetters[rest];
            else:
                return def(): return getter(mod.state_api.state);

    def handler_factory(self, path):
        modgetter, rest =  split_modgetter_rest(self, path)
        if rest.endsWith('~'):
            mutation = rest[:-1]
            return def(*args): modgetter(self).state_api.commit(mutation, *args);
        elif rest.endsWith('*'):
            action = rest[:-1]
            return def(*args): return modgetter(self)._dispatch(action, *args);
        else:
            return self.getter_factory(modgetter, rest)

    def $on(self, e, cb):
        self.state_api.vm.$on(e, cb)
        return def(): self.$off(e, cb);

    def $off(self, e, cb):
        self.state_api.vm.$off(e, cb)

    def $emit(self):
        self.state_api.vm.$emit.apply(self.state_api.vm, arguments)

    def commit(self, mutation, *payload):
        modgetter, mutation =  split_modgetter_rest(self, mutation)
        return modgetter(self).state_api.commit(mutation, *payload)

    def _dispatch(self, action, *payload):
        print_log('action: ', action)
        print_log('\tpayload: ',  payload)
        if not self.actions or (not (action in self.actions)):
            raise Error('unknown action: ' + action)
        p = self[action].apply(self, payload)
        if not isinstance(p, Promise):
            p = Promise.resolve(p)
        return p

    def dispatch(self, action, *payload):
        modgetter, action =  split_modgetter_rest(self, action)
        mod = modgetter(self)
        return mod._dispatch(action, *payload)

    def set_action(self, h, as_name):
        as_name = as_name or h.__name__ or h.name
        if not (as_name and type(as_name).startsWith('Str') ):
            raise Error('can`t get the name of new action: ' + h)
        if as_name in self.actions:
            pass
        elif self.hasOwnProperty(as_name):
            raise Error('Bad action name: ' + as_name)
        self.actions[as_name] = self[as_name] = h

    @staticmethod
    def before_create():
        map_store = 'map_store'
        is_mutation_re  =  /(.+)~$/
        is_action_re  =  /(.+)\*$/

        $opts = this.$options
        #!don't replace with map_store in ...
        $map_opts = $opts[map_store] or $opts.propsData and $opts.propsData[map_store]
        self =  $opts.store or $opts.parent and $opts.parent.$store
        if self:
            this.$store = self

        if not $map_opts:
            return
        if not self:
            raise Error('Store is not found')


        injectors = {
            '*': (def(f): return def(): f.call(this, self.dispatch_bound, *arguments);),
            '~': (def(f): return def(): f.call(this, self.commit_bound, *arguments);)
        }

        for opt in ['methods', 'computed']:
            # make clone - important!
            $opts[opt] = Object.assign({}, $opts[opt])

        if Array.isArray($map_opts):
            $map_opts = { k:k for k in $map_opts}

        for map_to in $map_opts:
            map_from = $map_opts[map_to]
            if map_from in ['*','~']:
                if not $opts.methods[map_to]:
                    raise ReferenceError('Can`t map ' + map_from +' to non-existing method: ' + map_to)
                $opts.methods[map_to] = injectors[map_from]($opts.methods[map_to])
            elif type(map_from).startsWith('Fun') and (map_to_split = /(.+?)(\*|~)$/.exec(map_to)):
                map_to_meth = map_to_split[1]
                store_meth = map_to_split[2]
                $opts.methods[map_to_meth] = injectors[store_meth](map_from)
            else:
                modgetter, rest = split_modgetter_rest(self, map_from)
                store_mod = modgetter(self)
                if rest is '$bus':
                    $opts['computed'][map_to] = def(): return modgetter(self).$bus;
                    continue
                handler = self.handler_factory(map_from)
                if (action = is_action_re.exec(rest)):
                    action = action[1]
                    if not (action in store_mod.actions):
                        raise ReferenceError('unknown action in `map_store`: ' + map_from)
                    if $opts['methods'][map_to]:
                        $opts['methods'][map_to] = \
                            (def(h, store_h):
                                 return (def(): return h.call(this, store_h, *arguments);)
                            )($opts['methods'][map_to], handler)
                    else:
                        $opts['methods'][map_to] = handler
                elif (mutation = is_mutation_re.exec(rest)):
                    mutation = mutation[1]
                    if not (mutation in store_mod.state_api.mutations):
                        raise ReferenceError('unknown mutation in `map_store`: ' + map_from)
                    if $opts['methods'][map_to]:
                        $opts['methods'][map_to] = \
                            (def(h, store_h):
                                 return (def(): return h.call(this, store_h, *arguments);)
                            )($opts['methods'][map_to], handler)
                    else:
                        $opts['methods'][map_to] = handler
                elif store_mod.state_api.check_gpath(rest) or store_mod.state_api.check_spath(rest):
                    $opts['computed'][map_to] = handler()
                else:
                    raise ReferenceError('Can`t map `' + map_from + '` to `' + map_to +  '`')

    @staticmethod
    def beforeDestroy():
        self = this
        if self.bus_cleanup and self.bus_cleanup.length:
            print_log('bus_cleanup', self.bus_cleanup)
            self.bus_cleanup.forEach(def(off): off();)

    @staticmethod
    def install(Vue, opt):
        RS_store.prototype.vue = Vue
        Vue.mixin({ beforeCreate: RS_store.before_create, beforeDestroy:RS_store.beforeDestroy })

