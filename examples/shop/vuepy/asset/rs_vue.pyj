# ----- log -----------
def print_log(*args):
    if window.ENV and window.ENV.debug:
        console.log.apply(console, arguments)

def unpack_name_fun_opt(f_reg_as):
    def unpacker(reg_as, name_fun_opt, opt):
        if not name_fun_opt:
            raise Error('Attempt to call V_Collector @decorator with empty `()`')

        self = this
        arg1type = type(name_fun_opt)
        # Simple call:  @decor
        if arg1type.startsWith('Fun'):
            name = name_fun_opt.__name__ or name_fun_opt.name
            return f_reg_as.call(self, reg_as, name, name_fun_opt)
        # Factory call: @decor('name') or  @decor('name', {}) or @decor({})
        else:
            return def(f):
                nonlocal opt
                # @decor('name') or  @decor('name', {})
                # if name_fun_opt is String then use it as name
                if arg1type.startsWith('Str'):
                    name = name_fun_opt
                    if opt:
                        opt.handler = f
                    else:
                        opt = f
                # @decor({})
                else:
                    opt = name_fun_opt
                    name = f.__name__ or f.name
                    opt.handler = f
                return f_reg_as.call(self, reg_as, name, opt)
    return unpacker

class V_collector:
    def __init__(self):
        self._methods = None
        self._computed = None
        self._watch = None
        self._filters = None
        self._directives = None

        self._getters = None
        self._mutations = None
        self._actions = None

    @unpack_name_fun_opt
    def _reg_as(self, reg_as, name, fun_opt):
        print_log('reg '+ reg_as + ' ' + name + ' self: ', self)
        if not self[reg_as]:
            self[reg_as] = {}
        self[reg_as][name] = fun_opt
        return fun_opt.handler ? fun_opt.handler : fun_opt

    def meth(self, name_or_fun):       return self._reg_as('_methods', name_or_fun)
    def computed(self, name_or_fun):   return self._reg_as('_computed', name_or_fun)
    def filter(self, name_or_fun):     return self._reg_as('_filters', name_or_fun)
    def directive(self, name_or_fun):  return self._reg_as('_directives', name_or_fun)
    def watch(self, name_or_fun, opt): return self._reg_as('_watch', name_or_fun, opt)

    def getter(self, name_or_fun): return self._reg_as('_getters', name_or_fun)
    def mutation(self, name_or_fun): return self._reg_as('_mutations', name_or_fun)
    def action(self, name_or_fun): return self._reg_as('_actions', name_or_fun)

class RS_vue:
    def __init__(self, v_collector):
        self.props = {}
        self.data = self._init_data
        self.delimiters = ['{{', '}}']
        if v_collector:
            self.methods = v_collector._methods
            self.computed = v_collector._computed
            self.directives = v_collector._directives
            self.filters = v_collector._filters
            self.watch = v_collector._watch
            for it in [['~', '_mutations'], ['*', '_actions']]:
                sym, _name = it
                if v_collector[_name]:
                    if not self.map_store:
                        self.map_store = {}
                    for k in v_collector[_name]:
                        self.map_store[k] = sym
                        self.methods[k] = v_collector[_name][k]

        self_keys = Object.keys(self)
        for v_spec in [ 'beforeCreate','created',
                        'beforeMount', 'mounted',
                        'beforeUpdate', 'updated',
                        'activated', 'deactivated',
                        'beforeDestroy', 'destroyed']:
            if !(v_spec in self_keys) and (tmp = self.__proto__[v_spec]):
                self[v_spec] = tmp

    def _init_data(self):
        raise ReferenceError('Not implemented')
