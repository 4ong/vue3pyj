import api.shop as shop
from asset.common import asyncer
from asset.rs_vue import V_collector
from asset.store2 import  RS_store, RS_state_api

Shop_err = shop.Shop_err

def default_state():
    ret = {
        items: [],
        checkout: {
            status: None,
            msg: ''
        }
    }
    return ret

vc = V_collector()
class State(RS_state_api):

    @vc.getter
    def products(self, state, getters, root_state):
        return state.items.map(
            def(it):
                product = root_state.products.all.find(def(product): return product.id == it.id;)
                return {
                    title: product.title,
                    price: product.price,
                    quantity: it.quantity
                };
        )

    @vc.getter
    def total_price(self, state, getters):
        return getters.products.reduce(
            def(total, product):  return total + product.price * product.quantity;
            ,0)

    @vc.mutation
    def push_product_to_cart(self, product):
        self.state.items.push({id: product.id, quantity:1})

    @vc.mutation
    def inc_item_quantity(self, product):
        item = self.state.items.find(def(it): return it.id is product.id;)
        item.quantity += 1

    @vc.mutation
    def set_cart_items(self, items):
        self.state.items = items

    @vc.mutation
    def set_checkout(self, checkout):
        self.state.checkout = checkout

    @vc.mutation
    def set_checkout_status(self, status):
        self.state.checkout.status = status
        if not status:
            self.state.checkout.msg = ''

class Store(RS_store):
    def __init__(self, root):
        self.root = root
        self.state_api = State(vc, default_state(), self.root.state_api)
        self.actions = vc._actions

    @vc.action
    @asyncer
    def checkout(self, products):
        state = self.state_api.state
        saved_cart_items = state.items[:]
        self.commit('set_checkout_status', None)
        # empty cart
        self.commit('set_cart_items',  [])
        try:
            yield shop.buy_products(products)
        except Shop_err as err:
            self.commit('set_checkout', {status:'failed', msg: err.message})
            # rollback to the cart saved before sending the request
            self.commit('set_cart_items',  saved_cart_items)
            return
        # success
        self.commit('set_checkout_status', 'successful')

    @vc.action
    def add_product_to_cart(self, product):
        state = self.state_api.state
        self.commit('set_checkout_status', None)
        if product.inventory > 0:
             cart_item = state.items.find(def(it): return it.id is product.id;)
        if not cart_item:
            self.commit('push_product_to_cart', { id: product.id })
        else:
            self.commit('inc_item_quantity', cart_item)
        # remove 1 item from stock
        self.root.commit('/products.dec_product_inventory', { id: product.id })

if __name__ == '__main__':
    pass
